{"version":3,"sources":["serviceWorker.js","mp-code.js","index.js"],"names":["Boolean","window","location","hostname","match","marked","setOptions","breaks","placeholder","Editor","props","react_default","a","createElement","id","style","subStyle","onChange","convertText","value","text","Previewer","dangerouslySetInnerHTML","__html","markdown","MarkApp","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","disabled","innerWidth","state","view","disabledView","handleEditorChange","bind","assertThisInitialized","handleResize","convert","switchView","clearEditor","e","setState","target","editorMinimised","previewMinimised","paneStyle","display","gridTemplateRows","gridRowGap","editorStyle","previewStyle","gridTemplateColumns","gridColumnGap","height","width","type","onClick","mp_code_Editor","mp_code_Previewer","React","Component","ReactDOM","render","mp_code","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd200099.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport './style.css';\r\nimport marked from 'marked';\r\n\r\nconst OPTIONS = {breaks: true};\r\n\r\nmarked.setOptions(OPTIONS);\r\n\r\nconst placeholder = \r\n`# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n  \r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n  \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n`\r\n\r\nconst Editor = props => {\r\n  return (\r\n    <div id=\"editor-outer\" style={props.style} >\r\n      <h2>Editor</h2>\r\n      <textarea id=\"editor\" style={props.subStyle} onChange={props.convertText} value={props.text}/>\r\n    </div>\r\n    );\r\n};\r\n\r\nconst Previewer = props => {\r\n  return (\r\n    <div id=\"preview-outer\" style={props.style}> \r\n      <h2>Previewer</h2>\r\n      <div id=\"preview\"  dangerouslySetInnerHTML={{__html: props.markdown}}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nclass MarkApp extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    let disabled = false;\r\n    if(window.innerWidth < 800){\r\n      disabled = true;\r\n    }\r\n    this.state = {markdown: placeholder, view: \"stack\", disabledView : disabled};\r\n    this.handleEditorChange = this.handleEditorChange.bind(this);\r\n    this.handleResize = this.handleResize.bind(this);\r\n    this.convert = this.convert.bind(this);\r\n    this.switchView = this.switchView.bind(this);\r\n    this.clearEditor = this.clearEditor.bind(this);\r\n  }\r\n  \r\n  componentDidMount(){\r\n    //window.addEventListener(\"resize\",this.handleResize);\r\n  }\r\n  \r\n  componentDidUnmount(){\r\n    //window.removeEventListener(\"resize\",this.handleResize);\r\n  }\r\n  \r\n  //Set the current text in state to the current text in the editor\r\n  handleEditorChange(e){\r\n    this.setState({markdown: e.target.value, view: this.state.view, disabledView: this.state.disabledView});\r\n  }\r\n  \r\n  //\r\n  handleResize(e){\r\n    if(e.target.innerWidth < 800){\r\n       this.setState({markdown: this.state.markdown, view: \"stack\", disabledView: true});\r\n    }\r\n    else{\r\n      this.setState({markdown: this.state.markdown, view: this.state.view, disabledView: false, editorMinimised: this.state.editorMinimised, previewMinimised: this.state.previewMinimised});\r\n    }\r\n  }\r\n  \r\n  //Convert the text in the editor pane into parsed github flavoured markdown\r\n  convert(){\r\n    return marked(this.state.markdown); \r\n  }\r\n   \r\n  //Switch the orientation of the two containers(editor and preview) between editor above the previewer\r\n  //or the editor next to the previewer\r\n  switchView(){\r\n    if(this.state.view == \"stack\"){\r\n      this.setState({markdown: this.state.markdown, view: \"aside\", disabledView: this.state.disabledView});\r\n    } \r\n    else{\r\n      this.setState({markdown: this.state.markdown, view: \"stack\", disabledView: this.state.disabledView});\r\n    }\r\n  }\r\n  \r\n  //Clear all the text in the editor pane\r\n  clearEditor(){\r\n    this.setState({markdown: \"\", view: this.state.view, disabledView: this.state.disabledView});  \r\n  }\r\n  \r\n  render(){\r\n    let paneStyle = {display: \"grid\", gridTemplateRows: \"auto 1fr\", gridRowGap: \"20px\"};\r\n    let editorStyle = {};\r\n    let previewStyle = {};\r\n    if(this.state.view != \"stack\"){\r\n      paneStyle = {display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gridColumnGap: \"10px\"};\r\n      editorStyle = {height: \"100%\", width: \"100%\"};\r\n      previewStyle = {height: \"100%\", width: \"100%\"};\r\n    }\r\n    return(\r\n    <div id=\"app-outer\">\r\n        <h1 id=\"title\">Markdown Previewer</h1>\r\n        <div id=\"button-div\">\r\n          <button type=\"button\" onClick={this.switchView} disabled={this.state.disabledView}>Switch Views</button>\r\n          <button type=\"button\" onClick={this.clearEditor}>Clear Editor</button>\r\n        </div>\r\n        <div id=\"app-inner\" style={paneStyle}>\r\n        <Editor style={editorStyle} convertText={this.handleEditorChange} text={this.state.markdown}/>\r\n        <Previewer style={previewStyle} markdown={this.convert()}/>\r\n        </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MarkApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './style.css';\nimport * as serviceWorker from './serviceWorker';\nimport MarkApp from './mp-code';\n\nReactDOM.render(<MarkApp/>, document.getElementById(\"main\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}